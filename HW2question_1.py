# -*- coding: utf-8 -*-
"""Question 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/193_EZ5ad4DGwOVI5U4tASZZBwgGHY3-N
"""

#Loading Libraries
import numpy as np
import matplotlib.pyplot as plt

def value_iteration(probhead):
    discount_factor = 1
    numStates = 100
    reward = [0] * 101 #reward for each state
    reward[100]=1  # only get reward if reaches state 100
    threshold = 0.00000001 #threshold value for comparing the difference
    value= [0] * 101 # value function for all states form 1 to 99
    policy = [0] * 101 #store the policy/bet that gives the max reward

    def bellmanEQU(num):    
        optimal = 0 #"Initialize optimal value to be zero"
        for bet in range(0,num):
            win = max(min(num + bet,100),0) #Amount after winning, if amount >= 100, reward =1
            loss = max(min(num - bet,100),0) #Amount after loosing, if amount >= 100, reward =0
            
            sum = probhead * (reward[win] + discount_factor * value[win]) + (1 - probhead) * (reward[loss] + discount_factor * value[loss]) #calculate the average of possible states for an action

            if sum > optimal: #Choosing bet with the max reward
                optimal = sum
                value[num] = sum #update the value
                policy[num] = bet #update the policy 

    temp = 99999
    while temp > threshold:
        temp = 0
        for i in range(1,numStates):
            oldvalue = value[i]
            bellmanEQU(i)
            diff = abs(oldvalue-value[i])
            temp = max(temp,diff)
    xaxis = [i for i in range(1,100)]
    plt.plot(xaxis,policy[1:100])
    plt.ylabel("Optimal Policy",fontsize=20)
    plt.xlabel("States",fontsize=20)
    plt.title("P ="+ str(probhead),fontsize=20)
    plt.savefig("Optimal_Policy"+str(probhead)+".pdf")
    plt.show()
    xaxis = [i for i in range(1,100)]
    plt.plot(xaxis,value[1:100])
    plt.ylabel("Value estimates",fontsize=20)
    plt.xlabel("States",fontsize=20)
    plt.title("P ="+ str(probhead),fontsize=20)
    plt.savefig("Value_estimates"+str(probhead)+".pdf")    
    plt.show()

value_iteration(0.25)

value_iteration(0.4)

value_iteration(0.55)

